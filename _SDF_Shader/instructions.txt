Instructions
=============

See https://discourse.threejs.org/t/sdfs-in-the-scene-raymarching/78355/

In the file SDF_designs.js   
you develop your designs. There is a short guide at the beginning.

An example:


```
// make another design : index 1
//***************************************
SDF_designs[ 1 ] = `   // don't change this line
 
  distCol dcSph;
  dcSph.d = sdSphere(p, 0.25 );
  dcSph.c = vec4( 0.9, 0.8, 0.2, 1.0 );
  
  distCol dcTor;
  vec3 dcTorRotX = rotateX( p, 0.2*PI * time );
  dcTor.d = sdTorus(dcTorRotX, vec2(0.28, 0.08));
  dcTor.c = vec4( 0.4, 0.2, 0.7, 1.0 );
  
  dc = opUnion(dcSph, dcTor);

`;  // don't change this line
// .......................................................
```
I use a structure to take distance and color into account. 


```
  struct distCol { // distance, color
    float d;
    vec4 c;
  };
```

The primitives from **Inigo Quilez** are used. I have saved these in the file define_3D_SDFs.js
(supplemented by a custom SDFs from combinations). 

The operations from the SDF_operations.js file are available for combining the primitives.
As they take into account not only the distance but also the color, I have adapted them accordingly.
The file also contains translations and rotations for SDFs.

The shader part is outsourced to the file shaderParts.js to keep the html file short and clear.
  
In the actual application   00_SDF-Shader.html  
you only specify the size and position parameters for the boxes that are used to place the SDFs:


```
//   define size and position of boxes containing the SDFs from  SDF_designs.js
// *****************************************************************************
//              width, height, depth, pos x, pos y, pos z
boxParam[ 0 ] = [  3.0,   3.0,   3.0,   0.0,   1.5,   0.0 ];
boxParam[ 1 ] = [  3.0,   3.0,   3.0,  -3.0,   1.5,  -3.0 ];
boxParam[ 2 ] = [  3.0,   3.0,   3.0,  -3.0,   1.5,   3.0 ];
boxParam[ 3 ] = [  3.0,   3.0,   3.0,   3.0,   1.5,   3.0 ];
boxParam[ 4 ] = [  3.0,   3.0,   3.0,   3.0,   1.5,  -3.0 ];
boxParam[ 5 ] = [ 50.0,   8.0,  12.0,   0.0,   4.0, -20.0 ];

// *****************************************************************************

```
To check the values, you can vary the following line:

`transparent: true, // use false to see the boxes` 

 
*The three examples are for demonstration purposes only and do not claim to be works of art. I am concerned with the structure and the program-technical procedure, I leave the creativity to interested users.*  

 The head can be the beginning and it can end like this: https://www.shadertoy.com/view/WsSBzh.

  https://iquilezles.org/articles/smin/ can serve as a small reference.

Sources   https://iquilezles.org/